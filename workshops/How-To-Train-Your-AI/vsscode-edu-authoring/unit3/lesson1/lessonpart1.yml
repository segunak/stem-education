# yaml-language-server: $schema=https://vscodeedu.com/assets/schema/course-v2.schema.json
id: interactive-control
title: Full Interactive Control
content: |
  # Interactive Text Generation

  **Your Task:** Take full control of your AI by adjusting all parameters and choosing a starting word.

  ## Full Control Parameters:
  - **Output Length**: How many words to generate
  - **Window Size**: How much context to use
  - **Temperature**: How creative vs. predictable the text will be
  - **Starting Word**: The first word to begin your text

  ## Experiment Tasks:
  1. Try the default settings first
  2. Then use `window_size=6`, `temperature=0.7` for better coherence
  3. Try different starting words like "The", "I", or "On" to see how they affect the theme

  ## Challenge:
  Can you find the perfect combination to create the most human-like text?

code: |
  # Interactive AI Text Generator
  # Take full control with all parameters and choose a starting word

  import re
  import os
  import sys
  import random

  # Load training data
  script_dir = os.path.dirname(__file__)
  data_file_path = os.path.join(script_dir, "../../data.txt")

  with open(data_file_path, "r") as f:
      lines = f.readlines()

  words = []
  for line in lines:
      words.extend(line.strip().split())

  # Create lowercase set for case-insensitive matching of starting words
  words_lower = [w.lower() for w in words]
  words_lower_set = set(words_lower)

  # Default settings
  DEFAULT_WINDOW_SIZE = 1
  DEFAULT_TEMPERATURE = 1.8
  DEFAULT_OUTPUT_LENGTH = 30
  TRAINING_ITERATIONS = 20

  MIN_WINDOW_SIZE = 1
  MAX_WINDOW_SIZE = 10
  MIN_OUTPUT_LENGTH = 5
  MAX_OUTPUT_LENGTH = 50
  MIN_TEMPERATURE = 0.1
  MAX_TEMPERATURE = 2.0

  def get_user_input(prompt, default, min_val, max_val, cast_type):
      """Get and validate user input"""
      user_in = input(prompt).strip().lower()
      if user_in == 'quit':
          sys.exit(0)
      elif user_in:
          try:
              val = cast_type(user_in)
              if min_val <= val <= max_val:
                  return val
              else:
                  print(f"Out of range. Using default ({default}).")
          except ValueError:
              print(f"Invalid input. Using default ({default}).")
      return default

  def build_markov_dict(window_size):
      """Build a dictionary of word patterns and their possible next words"""
      markov_dict = {}
      for i in range(len(words) - window_size):
          key = tuple(words[i:i + window_size])
          next_word = words[i + window_size]
          if key not in markov_dict:
              markov_dict[key] = {}
          if next_word not in markov_dict[key]:
              markov_dict[key][next_word] = 0
          markov_dict[key][next_word] += 1
      return markov_dict

  def smooth_markov_dict(markov_dict):
      """Make sure no probability is zero"""
      for key, next_words in markov_dict.items():
          total = sum(next_words.values())
          for w in next_words:
              next_words[w] = (next_words[w] + 1) / (total + len(next_words))

  def refine_weights(markov_dict, iterations):
      """Improve the model through iterative refinement"""
      for _ in range(iterations):
          for key in markov_dict:
              next_words = markov_dict[key]
              total = sum(next_words.values())
              for w in next_words:
                  next_words[w] = (next_words[w] + 0.05) / (total + 0.05 * len(next_words))

  def pick_next_word(markov_dict, key, temperature):
      """Choose the next word based on context and temperature"""
      if key not in markov_dict:
          return random.choice(words)

      next_words = markov_dict[key]
      total = sum(next_words.values())

      # Apply temperature to adjust probabilities
      weighted_probs = []
      for w, count in next_words.items():
          freq = count / total
          freq = freq ** (1.5 / temperature)
          weighted_probs.append((w, freq))

      sum_weights = sum(adj for _, adj in weighted_probs)
      r = random.random() * sum_weights
      cumulative = 0
      for w, adj in weighted_probs:
          cumulative += adj
          if r < cumulative:
              return w
      return weighted_probs[-1][0]

  def format_text(text):
      """Format the generated text to look more like natural language"""
      if not text:
          return ""
      # Capitalize first letter
      formatted = text[0].upper() + text[1:]
      # Add period at end if no punctuation
      if not re.search(r'[.!?]$', formatted):
          formatted += "."
      return formatted

  def run_interactive():
      """Main function for the interactive text generator"""
      print("\n=== INTERACTIVE AI TEXT GENERATOR ===")
      print("Control all aspects of your AI model!\n")
      
      # Step 1: Get output length
      output_length = get_user_input(
          f"How many words to generate? ({MIN_OUTPUT_LENGTH}-{MAX_OUTPUT_LENGTH}, default={DEFAULT_OUTPUT_LENGTH}): ",
          DEFAULT_OUTPUT_LENGTH, MIN_OUTPUT_LENGTH, MAX_OUTPUT_LENGTH, int
      )
      
      # Step 2: Get window size
      max_ws = min(MAX_WINDOW_SIZE, output_length - 1)
      window_size = get_user_input(
          f"\nWindow size - how much context to use? ({MIN_WINDOW_SIZE}-{max_ws}, default={DEFAULT_WINDOW_SIZE}): ",
          DEFAULT_WINDOW_SIZE, MIN_WINDOW_SIZE, max_ws, int
      )
      
      # Step 3: Get temperature
      temperature = get_user_input(
          f"\nTemperature - how creative vs predictable? ({MIN_TEMPERATURE}-{MAX_TEMPERATURE}, default={DEFAULT_TEMPERATURE}): ",
          DEFAULT_TEMPERATURE, MIN_TEMPERATURE, MAX_TEMPERATURE, float
      )
      
      # Build and train the model
      markov_data = build_markov_dict(window_size)
      smooth_markov_dict(markov_data)
      refine_weights(markov_data, TRAINING_ITERATIONS)
      
      # Step 4: Get starting word
      print("\nEnter a starting word (case-insensitive).")
      print("Try: 'I', 'The', 'On', 'She', 'He', or any other word from the training data.")
      start_word = input("Starting word: ").strip()
      start_word_lower = start_word.lower()
      
      # Check if starting word exists in our data
      if start_word_lower in words_lower_set:
          # Find the actual version (with proper case) from the training data
          for w in words:
              if w.lower() == start_word_lower:
                  start_word = w
                  break
          # Create the starting key with this word
          start_key = [start_word]
          while len(start_key) < window_size:
              start_key.append(random.choice(words))
          generated = list(start_key)
      else:
          print("\nThat word isn't in the training data. Using a random starting word instead.")
          chosen_key = random.choice(list(markov_data.keys()))
          generated = list(chosen_key)
      
      # Track used words to avoid too much repetition
      used_words = set(generated)
      
      # Generate the text
      for _ in range(output_length - window_size):
          curr_key = tuple(generated[-window_size:])
          next_word = pick_next_word(markov_data, curr_key, temperature)
          
          # Occasionally skip repeated words
          if next_word in used_words and random.random() > 0.7:
              next_word = random.choice(words)
          generated.append(next_word)
          used_words.add(next_word)
      
      # Format and display the output
      formatted_output = format_text(" ".join(generated))
      
      print(f"\nGenerated text (window_size={window_size}, temperature={temperature}, length={output_length}):\n")
      print("*" * 50)
      print(formatted_output)
      print("*" * 50)
      
      print("\nExperiment with different settings to see how they affect the output!")
      print("HINT: For best results, try window_size=6 and temperature=0.7")

  # Run the interactive generator
  run_interactive()

settings:
  hideRepl: false
  hideEditor: false
  hideFileExplorer: false